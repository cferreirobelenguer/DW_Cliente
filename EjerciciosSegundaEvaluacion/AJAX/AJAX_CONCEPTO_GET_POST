


AJAX
_____

PROCESO:

Se envía una información al servidor y el servidor envía una respuesta del servdor.
El código js procesa esa información del servidor en nuestra web para que se entienda.
Se pueden lanzar varias peticiones simultáneas, es asíncrono.

OBJETOS QUE INTERVIENEN:

NAVEGADOR
SERVIDOR
CÓDIGO JAVASCRIPT
XMLHttpRequest (XHR) : ES UN VEHÍCULO O PUENTE PARA MANDAR LAS PETICIONES POST O RECIBIR LAS PETICIONES GET. ES EL NÚCLEO MÁS
IMPORTANTE DE LA TECNOLOGÍA AJAX.

PASOS PARA ENVIAR PETICIÓN AL SERVIDOR Y PROCESAR LA RESPUESTA:
_______________________________________________________________

1. Crear instancia de XMLHttpRequest
var mi_var=new XMLHttpRequest();

2. Utilizar el método open() del objeto XHR para especificar qué petición se enviará al servidor y donde irá la petición dentro del servidor.
  Dos formas de enviar la información al servidor
    GET: la información de la petición se envía utilizando la URL del navegador como medio. Utilizado habitualmente para recibir y procesar
    respuesta del servidor.
    POST: Utilizado habitualmente para actualizar información alojada en el servidor (actualizaciones en BBDD). Se debe utilizar el método send() del 
    objeto XHR.
  Especificaremos la página alojada en el servidor encargada de procesar la información:
    mi_var.open("GET","TIENDA.PHP?id_PRODUCTO=45");
 
3. Crear una función Javascript que gestione la respuesta:
  Modificando el DOM
  
 4. Recibir la repsuesta:
  La respuesta está formada por diferentes piezas de información: estado de la respuesta (código), texto de respuesta, XML
  de respuesta (código), texto de respuesta, XML de respuesta, HTML de respuesta, JSON de respuesta.
  La mayoría de las veces se recibirá un texto de respuesta que se gestionará utilizando la propiedad responseText del objeto XHR.
  
  
  404 file not found es un código de respuesta del servidor, un código de error de que no se encuentra el archivo.
  

GET Y POST CONCEPTO:
___________________

MÉTODO GET:
El mencionado método de petición sirve para solicitar un recurso específico del servidor.
Las peticiones GET son utilizadas para acceder a datos, páginas o imágenes, entre
otros recursos. Si nos dirigimos a la pestaña red (network) de nuestra consola de
desarrollo, podremos observar todas las peticiones realizadas por el cliente al momento
de solicitar un sitio, Podemos observar que por cada petición, existe una descripción de estado (status):
estos son códigos de respuesta otorgados por el servidor cada vez que el cliente realiza
una. El código 200 significa que el recurso solicitado ha sido recuperado, y se transmite
en forma de respuesta. Para el caso de una petición GET sobre un documento HTML, el
servidor responde la estructura del propio documento.

Como programadores/as, empleamos el código de respuesta de la petición GET para
saber si el recurso se obtuvo correctamente; de ser así, podemos incluir la respuesta en
nuestra aplicación, caso contrario volvemos a solicitar el elemento al servidor,
informamos al usuario que el mismo no se cargó correctamente, o no existe.

MÉTODO POST:
Cada vez que enviamos datos usando un formulario, empleamos el método POST, como
en el ejemplo, al suscribirse al Newsletter.

El método POST nos permite enviar datos al servidor, los cuales serán procesados y
posiblemente almacenados en una base. Asimismo, para la petición POST contamos con
el código de respuesta, el cual será 200 si la información fue procesada correctamente.

Como programadores/as empleamos el código de respuesta de la petición POST para
saber si la informaciòn enviada se procesó correctamente, y en consecuencia efectuar
una salida de confirmación de registro.
También es posible visualizar la información enviada durante una petición POST, al
igual que el tipo de información (Content-Type), en la parte de la petición HTTP
identificada como la cabecera o header.

Comparación GET y POST
_________________________


Si bien existen otros métodos HTTP, GET y POST son los más empleados porque
JavaScript - Ajax con jQuery
permiten cubrir gran parte de las situaciones de comunicación cliente-servidor. Es decir,
solicitar y enviar datos al back-end es una tarea recurrente en nuestra aplicación, por lo
cual tenemos la necesidad de conocer cómo funcionan estos métodos, y cuáles son sus
diferencias. Para compararlos, podemos tomar la siguiente tabla como referencia:

Una de las diferencias más importantes entre ambos es que GET está pensado como
método de acceso, razón por la cual las URLs GET pueden ser almacenadas en el
historial, o indexadas por buscadores. En cambio las direcciones que emplean POST, al
ser este un método reservado al envío de datos en distintos formatos, no pueden
utilizarse para navegar.
Cabe aclarar que es posible que una solicitud GET contenga parámetros, lo cual implica
enviar cierta información al servidor en la propia dirección (por ejemplo:
http://www.domain.com/index.html?parametro1=value1). Generalmente, la información
más relevante a almacenar en el servidor se envía usando POST, ya que este método
JavaScript - Ajax con jQuery
permite determinar el formato de la información a enviar, usando una ruta de acceso no
disponible mediante GET,
Por último, en la actualidad existe HTTPs, el cual se encuentra basado en HTTP, siendo
un protocolo de comunicación más seguro entre cliente y servidor. En el mismo se
encriptan los datos para garantizar la seguridad de las peticiones. No obstante, los
métodos de petición son los mismos que HTTP.
Métodos Ajax con jQue



















